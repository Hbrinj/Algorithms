import java.util.ArrayList;
import java.util.LinkedList;


public class findMostFrequent {
	static int a[] = {10,3,500,2,3,4,3,10,2,13,98};
	public static void main(String argv[]){
		//strategy  sort, create remove dups array, use BST to find ranges of numbers
		heapsort();
		int nodups[] = removeDups();
	}
	
	private static void heapsort(){
		int start, end;
		
		for(start = (a.length-2)/2; start >= 0; start--)
			siftdown(start,a.length-1);
		
		for(end = a.length-1; end >0; end--){
			swap(end, 0);
			siftdown(0, end);
		}
	}
	
	private static void swap(int i, int j){
		int t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
	
	private static void siftdown(int s, int e){
		int root = s;
		while((root*2)+1 < e){
			int child = (root*2)+1;
			if(child+1 < e && a[child] < a[child+1])
				child++;
			
			if(a[root] < a[child]){
				swap(root,child);
				root=child;
			}
		}
	}
	
	private static int[] removeDups(){
		ArrayList<Integer> l = new ArrayList<Integer>();
		int current = a[0];
		l.add(current);
		for(int j : a){
			if(j != current){
				current = j;
				l.add(j);
			}
		}
		int b[] = new int[l.size()];
		b = l.toArray(b);
		return b;
	}
}
