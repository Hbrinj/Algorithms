
public class AVL extends BST{
	
	public AVL(){
		super();
	}
	
	public AVL(Node<Integer> n){
		super(n);
	}
	
	private void right_rotate(Node<Integer> n)
	{
		Node<Integer> newParent = n.left;
		n.left = newParent.right; //give the right child of the left node to the old root;
		if(n.left != null)
			n.left.parent = n;
		
		newParent.right = n; // the new roots right child is the oldroot
		n.parent = newParent; // the old roots parent is no the new root
		
		newParent.parent = n.parent; // the new root's parent is the old roots parent
		
		
		
		if(n.parent == null)
			root = newParent;
		else{
			if(n.parent.left == n)
				newParent.parent.left = newParent;
			else
				newParent.parent.right = newParent;
		}
	}
	
	private void left_rotate(Node <Integer> n){
		Node<Integer> newParent = n.right;
		n.right = newParent.left;
		if(n.left != null)
			n.right.parent = n;
		
		newParent.left = n;
		n.parent = newParent;
		
		if(n.parent == null)
			root = newParent;
		else{
			if(n.parent.left == n)
				newParent.parent.left = newParent;
			else
				newParent.parent.right = newParent;
		}
		
	}
}
