
public class PriorityQueue {
	private static final int INITIAL_CAPACITY = 20;
	private int[] Q;
	private int currentSize;
	
	public static void main(String argv[]){
		PriorityQueue PQ = new PriorityQueue();
		PQ.add(5);
		PQ.add(20);
		PQ.add(2);
		PQ.add(30);
		PQ.add(14);
		PQ.add(8);
		PQ.printPQ();
		System.out.println(PQ.remove());
		PQ.printPQ();
		System.out.println(PQ.remove());
	}
	
	
	public PriorityQueue (){
		this(INITIAL_CAPACITY);
	}
	
	public PriorityQueue(int size){
		Q = new int[size];
		currentSize = 1;
	}
	
	public void add(int n){
//		if(currentSize == Q.length)
//			//resize();
		
		Q[currentSize] = n;
		trickleUp(currentSize++);
	}
	
	private void trickleUp(int index){
		int parent = (index)/2;
		int bottom = Q[index];
		while(parent > 0 && Q[parent] > bottom){
			//System.out.println(index + " " + Q[parent]);
			Q[index] = Q[parent];
			index = parent;
			parent = (parent)/2;
		}
		Q[index] = bottom;
	}
	
	public int remove(){
		int t = Q[1];
		Q[1] = Q[--currentSize];
		trickleDown(1);
		return t;
	}
	
	private void trickleDown(int s){
		int root = s;
		while(root < currentSize){
			int child = root*2;
			if(child +1 < currentSize && Q[child] > Q[child+1])
				child++;
			
			if(Q[child] > Q[root]){
				swap(child,root);
				root = child;
			}else
				return;
		}
	}
	
	private void swap(int i, int j){
		int t = Q[i];
		Q[i] = Q[j];
		Q[j] = t;
	}
	
	public void printPQ(){
		for(int i = 0; i < currentSize; i++){
			System.out.print(Q[i] + " ");
		}
		System.out.println();
	}
}
