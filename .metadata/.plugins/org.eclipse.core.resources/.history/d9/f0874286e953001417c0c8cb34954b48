import java.util.ArrayList;


public class isSameArray {
	static int a[] = {1,2,3,4,5,6,7,8};
	static int b[] = {4,5,6,7,8,1,2,3};
	public static void main(String argv[]){
		//strategy  sort, create remove dups array, use BST to find ranges of numbers
		//int toMake = 10;
		//heapsort();
		
		if(a == null || b == null){
			System.out.println("Not the same");
			return;
		}
		
		if(a.length != b.length){
			System.out.println("Not the same");
			return;
		}
		
		int i = findStartOfRotate();
		int j = 0;
		for(j = 0; j < a.length; j++){
			if(a[j] != b[i]){
				System.out.println("Not equal");
				return;
			}
			i = (i+1)%b.length;
		}
	}
	
	private static int findStartOfRotate(){
		int hi = b.length-1;
		int lo = 0;
		
		while(lo <= hi){
			if(b[lo] <= b[hi])
				return lo;
			
			int mid = (hi+lo) /2;
			int next = (mid+1) % b.length;
			int prev = ((mid+b.length)-1) % b.length;
			if(b[mid] <= b[next]  && b[mid] <= b[prev])
				return mid;
			else if(b[mid] <= b[hi] )
				hi = mid-1;
			else if(b[mid] >= b[lo])
				lo = mid+1;
		}
		return -1;
	}
	
	private static void heapsort(){
		int start, end;
		
		for(start = (a.length-2)/2; start >= 0; start--)
			siftdown(start,a.length-1);
		
		for(end = a.length-1; end >0; end--){
			swap(end, 0);
			siftdown(0, end);
		}
	}
	
	private static void swap(int i, int j){
		int t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
	
	private static void siftdown(int s, int e){
		int root = s;
		while((root*2)+1 < e){
			int child = (root*2)+1;
			if(child+1 < e && a[child] < a[child+1])
				child++;
			
			if(a[root] < a[child]){
				swap(root,child);
				root=child;
			}else{
				return;
			}
		}
	}
	
	private static Integer[] removeDups(int max){
		ArrayList<Integer> l = new ArrayList<Integer>();
		int current = a[0];
		l.add(current);
		for(int j : a){
			if(j != current && j <= max){
				current = j;
				l.add(j);
			}
		}
		Integer[] b = l.toArray(new Integer[l.size()]);
		
		return b;
	}
	
	private static int find(Integer i){
		
		int l = 0;
		int r = a.length-1;
		while(l <= r){
			int mid = (l+r)/2;
			if (a[mid] == i){
				return mid;
			}
			else if(i < a[mid])
				r = mid-1;
			else
				l = mid+1;
		}
		return -1;
	}
}
